//-----------------------------------------------------------------------------
// This file auto generated by CodeGenDom from:
// ..\..\..\LevelEditor\schemas\level_editor.xsd
//-----------------------------------------------------------------------------
#include "RegisterSchemaObjects.h"
// disable warning C4100 unreferenced formal parameter for this file
#pragma warning(push)
#pragma warning(disable: 4100)
namespace LvEdEngine
{

//-----------------------------------------------------------------------------
// DEFINITIONS
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
//GameLevel
//-----------------------------------------------------------------------------
Object* GameLevel_Create(ObjectTypeGUID tid, void* data, int size)
{
    return new GameLevel();
}

//-----------------------------------------------------------------------------
void GameLevel_Name_Set(ObjectGUID instanceId, void* data, int size)
{
    assert((data && size > 0) || (!data && size == 0));
    GameLevel* instance = reinterpret_cast<GameLevel*>(instanceId);
    wchar_t* localData = reinterpret_cast<wchar_t*>(data);
    instance->SetName(localData);
}

//-----------------------------------------------------------------------------
void GameLevel_FogEnabled_Set(ObjectGUID instanceId, void* data, int size)
{
    assert((data && size > 0) || (!data && size == 0));
    GameLevel* instance = reinterpret_cast<GameLevel*>(instanceId);
    bool localData = *reinterpret_cast<bool*>(data);
    instance->SetFogEnabled(localData);
}

//-----------------------------------------------------------------------------
void GameLevel_FogColor_Set(ObjectGUID instanceId, void* data, int size)
{
    assert((data && size > 0) || (!data && size == 0));
    GameLevel* instance = reinterpret_cast<GameLevel*>(instanceId);
    int localData = *reinterpret_cast<int*>(data);
    instance->SetFogColor(localData);
}

//-----------------------------------------------------------------------------
void GameLevel_FogRange_Set(ObjectGUID instanceId, void* data, int size)
{
    assert((data && size > 0) || (!data && size == 0));
    GameLevel* instance = reinterpret_cast<GameLevel*>(instanceId);
    float localData = *reinterpret_cast<float*>(data);
    instance->SetFogRange(localData);
}

//-----------------------------------------------------------------------------
void GameLevel_FogDensity_Set(ObjectGUID instanceId, void* data, int size)
{
    assert((data && size > 0) || (!data && size == 0));
    GameLevel* instance = reinterpret_cast<GameLevel*>(instanceId);
    float localData = *reinterpret_cast<float*>(data);
    instance->SetFogDensity(localData);
}

//-----------------------------------------------------------------------------
//GameObject
//-----------------------------------------------------------------------------
Object* GameObject_Create(ObjectTypeGUID tid, void* data, int size)
{
    return new GameObject();
}

//-----------------------------------------------------------------------------
void GameObject_Transform_Set(ObjectGUID instanceId, void* data, int size)
{
    assert((data && size > 0) || (!data && size == 0));
    GameObject* instance = reinterpret_cast<GameObject*>(instanceId);
    Matrix localData = *reinterpret_cast<Matrix*>(data);
    instance->SetTransform(localData);
}

//-----------------------------------------------------------------------------
void GameObject_Name_Set(ObjectGUID instanceId, void* data, int size)
{
    assert((data && size > 0) || (!data && size == 0));
    GameObject* instance = reinterpret_cast<GameObject*>(instanceId);
    wchar_t* localData = reinterpret_cast<wchar_t*>(data);
    instance->SetName(localData);
}

//-----------------------------------------------------------------------------
void GameObject_Visible_Set(ObjectGUID instanceId, void* data, int size)
{
    assert((data && size > 0) || (!data && size == 0));
    GameObject* instance = reinterpret_cast<GameObject*>(instanceId);
    bool localData = *reinterpret_cast<bool*>(data);
    instance->SetVisible(localData);
}
//-----------------------------------------------------------------------------
void GameObject_Visible_Get(ObjectGUID instanceId, void** data, int* size)
{
    GameObject* instance = reinterpret_cast<GameObject*>(instanceId);
    static bool localData;
    localData = instance->GetVisible();
    *data = (void*)&localData;
    *size = sizeof(localData);
}

//-----------------------------------------------------------------------------
void GameObject_Bounds_Get(ObjectGUID instanceId, void** data, int* size)
{
    GameObject* instance = reinterpret_cast<GameObject*>(instanceId);
    static AABB localData;
    localData = instance->GetBounds();
    *data = (void*)&localData;
    *size = sizeof(localData);
}

//-----------------------------------------------------------------------------
void GameObject_LocalBounds_Get(ObjectGUID instanceId, void** data, int* size)
{
    GameObject* instance = reinterpret_cast<GameObject*>(instanceId);
    static AABB localData;
    localData = instance->GetLocalBounds();
    *data = (void*)&localData;
    *size = sizeof(localData);
}

//-----------------------------------------------------------------------------
void GameObject_Component_Add(ObjectGUID parentId, ObjectGUID childId, int index)
{
    GameObject* parent = reinterpret_cast<GameObject*>(parentId);
    GameObjectComponent* child = reinterpret_cast<GameObjectComponent*>(childId);
    parent->AddComponent(child, index);
}

//-----------------------------------------------------------------------------
void GameObject_Component_Remove(ObjectGUID parentId, ObjectGUID childId)
{
    GameObject* parent = reinterpret_cast<GameObject*>(parentId);
    GameObjectComponent* child = reinterpret_cast<GameObjectComponent*>(childId);
    parent->RemoveComponent(child);
}

//-----------------------------------------------------------------------------
//GameObjectComponent
//-----------------------------------------------------------------------------
Object* GameObjectComponent_Create(ObjectTypeGUID tid, void* data, int size)
{
    assert(0); // class GameObjectComponent is defined as abstract.
    return NULL;
}

//-----------------------------------------------------------------------------
void GameObjectComponent_Name_Set(ObjectGUID instanceId, void* data, int size)
{
    assert((data && size > 0) || (!data && size == 0));
    GameObjectComponent* instance = reinterpret_cast<GameObjectComponent*>(instanceId);
    wchar_t* localData = reinterpret_cast<wchar_t*>(data);
    instance->SetName(localData);
}

//-----------------------------------------------------------------------------
void GameObjectComponent_Active_Set(ObjectGUID instanceId, void* data, int size)
{
    assert((data && size > 0) || (!data && size == 0));
    GameObjectComponent* instance = reinterpret_cast<GameObjectComponent*>(instanceId);
    bool localData = *reinterpret_cast<bool*>(data);
    instance->SetActive(localData);
}

//-----------------------------------------------------------------------------
//GameObjectReference
//-----------------------------------------------------------------------------
Object* GameObjectReference_Create(ObjectTypeGUID tid, void* data, int size)
{
    return new GameObjectReference();
}

//-----------------------------------------------------------------------------
void GameObjectReference_Target_Set(ObjectGUID instanceId, void* data, int size)
{
    assert((data && size > 0) || (!data && size == 0));
    GameObjectReference* instance = reinterpret_cast<GameObjectReference*>(instanceId);
    GameObject* localData = reinterpret_cast<GameObject*>(data);
    instance->SetTarget(localData, size);
}

//-----------------------------------------------------------------------------
//ResourceReference
//-----------------------------------------------------------------------------
Object* ResourceReference_Create(ObjectTypeGUID tid, void* data, int size)
{
    return new ResourceReference();
}

//-----------------------------------------------------------------------------
void ResourceReference_Target_Set(ObjectGUID instanceId, void* data, int size)
{
    assert((data && size > 0) || (!data && size == 0));
    ResourceReference* instance = reinterpret_cast<ResourceReference*>(instanceId);
    wchar_t* localData = reinterpret_cast<wchar_t*>(data);
    instance->SetTarget(localData);
}

//-----------------------------------------------------------------------------
//TransformComponent
//-----------------------------------------------------------------------------
Object* TransformComponent_Create(ObjectTypeGUID tid, void* data, int size)
{
    return new TransformComponent();
}

//-----------------------------------------------------------------------------
void TransformComponent_Translation_Set(ObjectGUID instanceId, void* data, int size)
{
    assert((data && size > 0) || (!data && size == 0));
    TransformComponent* instance = reinterpret_cast<TransformComponent*>(instanceId);
    float3 localData = *reinterpret_cast<float3*>(data);
    instance->SetTranslation(localData);
}

//-----------------------------------------------------------------------------
void TransformComponent_Rotation_Set(ObjectGUID instanceId, void* data, int size)
{
    assert((data && size > 0) || (!data && size == 0));
    TransformComponent* instance = reinterpret_cast<TransformComponent*>(instanceId);
    float3 localData = *reinterpret_cast<float3*>(data);
    instance->SetRotation(localData);
}

//-----------------------------------------------------------------------------
void TransformComponent_Scale_Set(ObjectGUID instanceId, void* data, int size)
{
    assert((data && size > 0) || (!data && size == 0));
    TransformComponent* instance = reinterpret_cast<TransformComponent*>(instanceId);
    float3 localData = *reinterpret_cast<float3*>(data);
    instance->SetScale(localData);
}

//-----------------------------------------------------------------------------
//GameObjectGroup
//-----------------------------------------------------------------------------
Object* GameObjectGroup_Create(ObjectTypeGUID tid, void* data, int size)
{
    return new GameObjectGroup();
}

//-----------------------------------------------------------------------------
void GameObjectGroup_Child_Add(ObjectGUID parentId, ObjectGUID childId, int index)
{
    GameObjectGroup* parent = reinterpret_cast<GameObjectGroup*>(parentId);
    GameObject* child = reinterpret_cast<GameObject*>(childId);
    parent->AddChild(child, index);
}

//-----------------------------------------------------------------------------
void GameObjectGroup_Child_Remove(ObjectGUID parentId, ObjectGUID childId)
{
    GameObjectGroup* parent = reinterpret_cast<GameObjectGroup*>(parentId);
    GameObject* child = reinterpret_cast<GameObject*>(childId);
    parent->RemoveChild(child);
}

//-----------------------------------------------------------------------------
//RenderComponent
//-----------------------------------------------------------------------------
Object* RenderComponent_Create(ObjectTypeGUID tid, void* data, int size)
{
    assert(0); // class RenderComponent is defined as abstract.
    return NULL;
}

//-----------------------------------------------------------------------------
void RenderComponent_Visible_Set(ObjectGUID instanceId, void* data, int size)
{
    assert((data && size > 0) || (!data && size == 0));
    RenderComponent* instance = reinterpret_cast<RenderComponent*>(instanceId);
    bool localData = *reinterpret_cast<bool*>(data);
    instance->SetVisible(localData);
}

//-----------------------------------------------------------------------------
void RenderComponent_CastShadow_Set(ObjectGUID instanceId, void* data, int size)
{
    assert((data && size > 0) || (!data && size == 0));
    RenderComponent* instance = reinterpret_cast<RenderComponent*>(instanceId);
    bool localData = *reinterpret_cast<bool*>(data);
    instance->SetCastShadow(localData);
}

//-----------------------------------------------------------------------------
void RenderComponent_ReceiveShadow_Set(ObjectGUID instanceId, void* data, int size)
{
    assert((data && size > 0) || (!data && size == 0));
    RenderComponent* instance = reinterpret_cast<RenderComponent*>(instanceId);
    bool localData = *reinterpret_cast<bool*>(data);
    instance->SetReceiveShadow(localData);
}

//-----------------------------------------------------------------------------
void RenderComponent_DrawDistance_Set(ObjectGUID instanceId, void* data, int size)
{
    assert((data && size > 0) || (!data && size == 0));
    RenderComponent* instance = reinterpret_cast<RenderComponent*>(instanceId);
    float localData = *reinterpret_cast<float*>(data);
    instance->SetDrawDistance(localData);
}

//-----------------------------------------------------------------------------
//MeshComponent
//-----------------------------------------------------------------------------
Object* MeshComponent_Create(ObjectTypeGUID tid, void* data, int size)
{
    return new MeshComponent();
}

//-----------------------------------------------------------------------------
void MeshComponent_Ref_Set(ObjectGUID instanceId, void* data, int size)
{
    assert((data && size > 0) || (!data && size == 0));
    MeshComponent* instance = reinterpret_cast<MeshComponent*>(instanceId);
    wchar_t* localData = reinterpret_cast<wchar_t*>(data);
    instance->SetRef(localData);
}

//-----------------------------------------------------------------------------
//SpinnerComponent
//-----------------------------------------------------------------------------
Object* SpinnerComponent_Create(ObjectTypeGUID tid, void* data, int size)
{
    return new SpinnerComponent();
}

//-----------------------------------------------------------------------------
void SpinnerComponent_RPS_Set(ObjectGUID instanceId, void* data, int size)
{
    assert((data && size > 0) || (!data && size == 0));
    SpinnerComponent* instance = reinterpret_cast<SpinnerComponent*>(instanceId);
    float3 localData = *reinterpret_cast<float3*>(data);
    instance->SetRPS(localData);
}

//-----------------------------------------------------------------------------
//Locator
//-----------------------------------------------------------------------------
Object* Locator_Create(ObjectTypeGUID tid, void* data, int size)
{
    return new Locator();
}

//-----------------------------------------------------------------------------
void Locator_Resource_Add(ObjectGUID parentId, ObjectGUID childId, int index)
{
    Locator* parent = reinterpret_cast<Locator*>(parentId);
    ResourceReference* child = reinterpret_cast<ResourceReference*>(childId);
    parent->AddResource(child, index);
}

//-----------------------------------------------------------------------------
void Locator_Resource_Remove(ObjectGUID parentId, ObjectGUID childId)
{
    Locator* parent = reinterpret_cast<Locator*>(parentId);
    ResourceReference* child = reinterpret_cast<ResourceReference*>(childId);
    parent->RemoveResource(child);
}

//-----------------------------------------------------------------------------
//DirLightGob
//-----------------------------------------------------------------------------
Object* DirLightGob_Create(ObjectTypeGUID tid, void* data, int size)
{
    return new DirLightGob();
}

//-----------------------------------------------------------------------------
void DirLightGob_Ambient_Set(ObjectGUID instanceId, void* data, int size)
{
    assert((data && size > 0) || (!data && size == 0));
    DirLightGob* instance = reinterpret_cast<DirLightGob*>(instanceId);
    int localData = *reinterpret_cast<int*>(data);
    instance->SetAmbient(localData);
}

//-----------------------------------------------------------------------------
void DirLightGob_Diffuse_Set(ObjectGUID instanceId, void* data, int size)
{
    assert((data && size > 0) || (!data && size == 0));
    DirLightGob* instance = reinterpret_cast<DirLightGob*>(instanceId);
    int localData = *reinterpret_cast<int*>(data);
    instance->SetDiffuse(localData);
}

//-----------------------------------------------------------------------------
void DirLightGob_Specular_Set(ObjectGUID instanceId, void* data, int size)
{
    assert((data && size > 0) || (!data && size == 0));
    DirLightGob* instance = reinterpret_cast<DirLightGob*>(instanceId);
    int localData = *reinterpret_cast<int*>(data);
    instance->SetSpecular(localData);
}

//-----------------------------------------------------------------------------
void DirLightGob_Direction_Set(ObjectGUID instanceId, void* data, int size)
{
    assert((data && size > 0) || (!data && size == 0));
    DirLightGob* instance = reinterpret_cast<DirLightGob*>(instanceId);
    float3 localData = *reinterpret_cast<float3*>(data);
    instance->SetDirection(localData);
}

//-----------------------------------------------------------------------------
//BoxLightGob
//-----------------------------------------------------------------------------
Object* BoxLightGob_Create(ObjectTypeGUID tid, void* data, int size)
{
    return new BoxLightGob();
}

//-----------------------------------------------------------------------------
void BoxLightGob_Ambient_Set(ObjectGUID instanceId, void* data, int size)
{
    assert((data && size > 0) || (!data && size == 0));
    BoxLightGob* instance = reinterpret_cast<BoxLightGob*>(instanceId);
    int localData = *reinterpret_cast<int*>(data);
    instance->SetAmbient(localData);
}

//-----------------------------------------------------------------------------
void BoxLightGob_Diffuse_Set(ObjectGUID instanceId, void* data, int size)
{
    assert((data && size > 0) || (!data && size == 0));
    BoxLightGob* instance = reinterpret_cast<BoxLightGob*>(instanceId);
    int localData = *reinterpret_cast<int*>(data);
    instance->SetDiffuse(localData);
}

//-----------------------------------------------------------------------------
void BoxLightGob_Specular_Set(ObjectGUID instanceId, void* data, int size)
{
    assert((data && size > 0) || (!data && size == 0));
    BoxLightGob* instance = reinterpret_cast<BoxLightGob*>(instanceId);
    int localData = *reinterpret_cast<int*>(data);
    instance->SetSpecular(localData);
}

//-----------------------------------------------------------------------------
void BoxLightGob_Direction_Set(ObjectGUID instanceId, void* data, int size)
{
    assert((data && size > 0) || (!data && size == 0));
    BoxLightGob* instance = reinterpret_cast<BoxLightGob*>(instanceId);
    float3 localData = *reinterpret_cast<float3*>(data);
    instance->SetDirection(localData);
}
//-----------------------------------------------------------------------------
void BoxLightGob_Direction_Get(ObjectGUID instanceId, void** data, int* size)
{
    BoxLightGob* instance = reinterpret_cast<BoxLightGob*>(instanceId);
    static float3 localData;
    localData = instance->GetDirection();
    *data = (void*)&localData;
    *size = sizeof(localData);
}

//-----------------------------------------------------------------------------
void BoxLightGob_Attenuation_Set(ObjectGUID instanceId, void* data, int size)
{
    assert((data && size > 0) || (!data && size == 0));
    BoxLightGob* instance = reinterpret_cast<BoxLightGob*>(instanceId);
    float3 localData = *reinterpret_cast<float3*>(data);
    instance->SetAttenuation(localData);
}

//-----------------------------------------------------------------------------
//PointLightGob
//-----------------------------------------------------------------------------
Object* PointLightGob_Create(ObjectTypeGUID tid, void* data, int size)
{
    return new PointLightGob();
}

//-----------------------------------------------------------------------------
void PointLightGob_Ambient_Set(ObjectGUID instanceId, void* data, int size)
{
    assert((data && size > 0) || (!data && size == 0));
    PointLightGob* instance = reinterpret_cast<PointLightGob*>(instanceId);
    int localData = *reinterpret_cast<int*>(data);
    instance->SetAmbient(localData);
}

//-----------------------------------------------------------------------------
void PointLightGob_Diffuse_Set(ObjectGUID instanceId, void* data, int size)
{
    assert((data && size > 0) || (!data && size == 0));
    PointLightGob* instance = reinterpret_cast<PointLightGob*>(instanceId);
    int localData = *reinterpret_cast<int*>(data);
    instance->SetDiffuse(localData);
}

//-----------------------------------------------------------------------------
void PointLightGob_Specular_Set(ObjectGUID instanceId, void* data, int size)
{
    assert((data && size > 0) || (!data && size == 0));
    PointLightGob* instance = reinterpret_cast<PointLightGob*>(instanceId);
    int localData = *reinterpret_cast<int*>(data);
    instance->SetSpecular(localData);
}

//-----------------------------------------------------------------------------
void PointLightGob_Attenuation_Set(ObjectGUID instanceId, void* data, int size)
{
    assert((data && size > 0) || (!data && size == 0));
    PointLightGob* instance = reinterpret_cast<PointLightGob*>(instanceId);
    float3 localData = *reinterpret_cast<float3*>(data);
    instance->SetAttenuation(localData);
}

//-----------------------------------------------------------------------------
void PointLightGob_Range_Set(ObjectGUID instanceId, void* data, int size)
{
    assert((data && size > 0) || (!data && size == 0));
    PointLightGob* instance = reinterpret_cast<PointLightGob*>(instanceId);
    float localData = *reinterpret_cast<float*>(data);
    instance->SetRange(localData);
}

//-----------------------------------------------------------------------------
//ControlPointGob
//-----------------------------------------------------------------------------
Object* ControlPointGob_Create(ObjectTypeGUID tid, void* data, int size)
{
    return new ControlPointGob();
}

//-----------------------------------------------------------------------------
//CurveGob
//-----------------------------------------------------------------------------
Object* CurveGob_Create(ObjectTypeGUID tid, void* data, int size)
{
    return new CurveGob();
}

//-----------------------------------------------------------------------------
void CurveGob_Color_Set(ObjectGUID instanceId, void* data, int size)
{
    assert((data && size > 0) || (!data && size == 0));
    CurveGob* instance = reinterpret_cast<CurveGob*>(instanceId);
    int localData = *reinterpret_cast<int*>(data);
    instance->SetColor(localData);
}

//-----------------------------------------------------------------------------
void CurveGob_Closed_Set(ObjectGUID instanceId, void* data, int size)
{
    assert((data && size > 0) || (!data && size == 0));
    CurveGob* instance = reinterpret_cast<CurveGob*>(instanceId);
    bool localData = *reinterpret_cast<bool*>(data);
    instance->SetClosed(localData);
}

//-----------------------------------------------------------------------------
void CurveGob_Steps_Set(ObjectGUID instanceId, void* data, int size)
{
    assert((data && size > 0) || (!data && size == 0));
    CurveGob* instance = reinterpret_cast<CurveGob*>(instanceId);
    int localData = *reinterpret_cast<int*>(data);
    instance->SetSteps(localData);
}

//-----------------------------------------------------------------------------
void CurveGob_InterpolationType_Set(ObjectGUID instanceId, void* data, int size)
{
    assert((data && size > 0) || (!data && size == 0));
    CurveGob* instance = reinterpret_cast<CurveGob*>(instanceId);
    int localData = *reinterpret_cast<int*>(data);
    instance->SetInterpolationType(localData);
}

//-----------------------------------------------------------------------------
void CurveGob_Point_Add(ObjectGUID parentId, ObjectGUID childId, int index)
{
    CurveGob* parent = reinterpret_cast<CurveGob*>(parentId);
    ControlPointGob* child = reinterpret_cast<ControlPointGob*>(childId);
    parent->AddPoint(child, index);
}

//-----------------------------------------------------------------------------
void CurveGob_Point_Remove(ObjectGUID parentId, ObjectGUID childId)
{
    CurveGob* parent = reinterpret_cast<CurveGob*>(parentId);
    ControlPointGob* child = reinterpret_cast<ControlPointGob*>(childId);
    parent->RemovePoint(child);
}

//-----------------------------------------------------------------------------
//SkyDome
//-----------------------------------------------------------------------------
Object* SkyDome_Create(ObjectTypeGUID tid, void* data, int size)
{
    return new SkyDome();
}

//-----------------------------------------------------------------------------
void SkyDome_CubeMap_Set(ObjectGUID instanceId, void* data, int size)
{
    assert((data && size > 0) || (!data && size == 0));
    SkyDome* instance = reinterpret_cast<SkyDome*>(instanceId);
    wchar_t* localData = reinterpret_cast<wchar_t*>(data);
    instance->SetCubeMap(localData);
}

//-----------------------------------------------------------------------------
//PrimitiveShapeGob
//-----------------------------------------------------------------------------
Object* PrimitiveShapeGob_Create(ObjectTypeGUID tid, void* data, int size)
{
    assert(0); // class PrimitiveShapeGob is defined as abstract.
    return NULL;
}

//-----------------------------------------------------------------------------
void PrimitiveShapeGob_Color_Set(ObjectGUID instanceId, void* data, int size)
{
    assert((data && size > 0) || (!data && size == 0));
    PrimitiveShapeGob* instance = reinterpret_cast<PrimitiveShapeGob*>(instanceId);
    int localData = *reinterpret_cast<int*>(data);
    instance->SetColor(localData);
}

//-----------------------------------------------------------------------------
void PrimitiveShapeGob_Emissive_Set(ObjectGUID instanceId, void* data, int size)
{
    assert((data && size > 0) || (!data && size == 0));
    PrimitiveShapeGob* instance = reinterpret_cast<PrimitiveShapeGob*>(instanceId);
    int localData = *reinterpret_cast<int*>(data);
    instance->SetEmissive(localData);
}

//-----------------------------------------------------------------------------
void PrimitiveShapeGob_Specular_Set(ObjectGUID instanceId, void* data, int size)
{
    assert((data && size > 0) || (!data && size == 0));
    PrimitiveShapeGob* instance = reinterpret_cast<PrimitiveShapeGob*>(instanceId);
    int localData = *reinterpret_cast<int*>(data);
    instance->SetSpecular(localData);
}

//-----------------------------------------------------------------------------
void PrimitiveShapeGob_SpecularPower_Set(ObjectGUID instanceId, void* data, int size)
{
    assert((data && size > 0) || (!data && size == 0));
    PrimitiveShapeGob* instance = reinterpret_cast<PrimitiveShapeGob*>(instanceId);
    float localData = *reinterpret_cast<float*>(data);
    instance->SetSpecularPower(localData);
}

//-----------------------------------------------------------------------------
void PrimitiveShapeGob_Diffuse_Set(ObjectGUID instanceId, void* data, int size)
{
    assert((data && size > 0) || (!data && size == 0));
    PrimitiveShapeGob* instance = reinterpret_cast<PrimitiveShapeGob*>(instanceId);
    wchar_t* localData = reinterpret_cast<wchar_t*>(data);
    instance->SetDiffuse(localData);
}

//-----------------------------------------------------------------------------
void PrimitiveShapeGob_Normal_Set(ObjectGUID instanceId, void* data, int size)
{
    assert((data && size > 0) || (!data && size == 0));
    PrimitiveShapeGob* instance = reinterpret_cast<PrimitiveShapeGob*>(instanceId);
    wchar_t* localData = reinterpret_cast<wchar_t*>(data);
    instance->SetNormal(localData);
}

//-----------------------------------------------------------------------------
void PrimitiveShapeGob_TextureTransform_Set(ObjectGUID instanceId, void* data, int size)
{
    assert((data && size > 0) || (!data && size == 0));
    PrimitiveShapeGob* instance = reinterpret_cast<PrimitiveShapeGob*>(instanceId);
    Matrix localData = *reinterpret_cast<Matrix*>(data);
    instance->SetTextureTransform(localData);
}

//-----------------------------------------------------------------------------
//CubeGob
//-----------------------------------------------------------------------------
Object* CubeGob_Create(ObjectTypeGUID tid, void* data, int size)
{
    return new CubeGob();
}

//-----------------------------------------------------------------------------
//TorusGob
//-----------------------------------------------------------------------------
Object* TorusGob_Create(ObjectTypeGUID tid, void* data, int size)
{
    return new TorusGob();
}

//-----------------------------------------------------------------------------
//SphereGob
//-----------------------------------------------------------------------------
Object* SphereGob_Create(ObjectTypeGUID tid, void* data, int size)
{
    return new SphereGob();
}

//-----------------------------------------------------------------------------
//ConeGob
//-----------------------------------------------------------------------------
Object* ConeGob_Create(ObjectTypeGUID tid, void* data, int size)
{
    return new ConeGob();
}

//-----------------------------------------------------------------------------
//CylinderGob
//-----------------------------------------------------------------------------
Object* CylinderGob_Create(ObjectTypeGUID tid, void* data, int size)
{
    return new CylinderGob();
}

//-----------------------------------------------------------------------------
//PlaneGob
//-----------------------------------------------------------------------------
Object* PlaneGob_Create(ObjectTypeGUID tid, void* data, int size)
{
    return new PlaneGob();
}

//-----------------------------------------------------------------------------
//BillboardGob
//-----------------------------------------------------------------------------
Object* BillboardGob_Create(ObjectTypeGUID tid, void* data, int size)
{
    return new BillboardGob();
}

//-----------------------------------------------------------------------------
void BillboardGob_Intensity_Set(ObjectGUID instanceId, void* data, int size)
{
    assert((data && size > 0) || (!data && size == 0));
    BillboardGob* instance = reinterpret_cast<BillboardGob*>(instanceId);
    float localData = *reinterpret_cast<float*>(data);
    instance->SetIntensity(localData);
}

//-----------------------------------------------------------------------------
void BillboardGob_Diffuse_Set(ObjectGUID instanceId, void* data, int size)
{
    assert((data && size > 0) || (!data && size == 0));
    BillboardGob* instance = reinterpret_cast<BillboardGob*>(instanceId);
    wchar_t* localData = reinterpret_cast<wchar_t*>(data);
    instance->SetDiffuse(localData);
}

//-----------------------------------------------------------------------------
void BillboardGob_TextureTransform_Set(ObjectGUID instanceId, void* data, int size)
{
    assert((data && size > 0) || (!data && size == 0));
    BillboardGob* instance = reinterpret_cast<BillboardGob*>(instanceId);
    Matrix localData = *reinterpret_cast<Matrix*>(data);
    instance->SetTextureTransform(localData);
}

//-----------------------------------------------------------------------------
//OrcGob
//-----------------------------------------------------------------------------
Object* OrcGob_Create(ObjectTypeGUID tid, void* data, int size)
{
    return new OrcGob();
}

//-----------------------------------------------------------------------------
void OrcGob_Weight_Set(ObjectGUID instanceId, void* data, int size)
{
    assert((data && size > 0) || (!data && size == 0));
    OrcGob* instance = reinterpret_cast<OrcGob*>(instanceId);
    float localData = *reinterpret_cast<float*>(data);
    instance->SetWeight(localData);
}

//-----------------------------------------------------------------------------
void OrcGob_Emotion_Set(ObjectGUID instanceId, void* data, int size)
{
    assert((data && size > 0) || (!data && size == 0));
    OrcGob* instance = reinterpret_cast<OrcGob*>(instanceId);
    int localData = *reinterpret_cast<int*>(data);
    instance->SetEmotion(localData);
}

//-----------------------------------------------------------------------------
void OrcGob_Goals_Set(ObjectGUID instanceId, void* data, int size)
{
    assert((data && size > 0) || (!data && size == 0));
    OrcGob* instance = reinterpret_cast<OrcGob*>(instanceId);
    int localData = *reinterpret_cast<int*>(data);
    instance->SetGoals(localData);
}

//-----------------------------------------------------------------------------
void OrcGob_Color_Set(ObjectGUID instanceId, void* data, int size)
{
    assert((data && size > 0) || (!data && size == 0));
    OrcGob* instance = reinterpret_cast<OrcGob*>(instanceId);
    int localData = *reinterpret_cast<int*>(data);
    instance->SetColor(localData);
}

//-----------------------------------------------------------------------------
void OrcGob_ToeColor_Set(ObjectGUID instanceId, void* data, int size)
{
    assert((data && size > 0) || (!data && size == 0));
    OrcGob* instance = reinterpret_cast<OrcGob*>(instanceId);
    int localData = *reinterpret_cast<int*>(data);
    instance->SetToeColor(localData);
}

//-----------------------------------------------------------------------------
void OrcGob_Geometry_Add(ObjectGUID parentId, ObjectGUID childId, int index)
{
    OrcGob* parent = reinterpret_cast<OrcGob*>(parentId);
    ResourceReference* child = reinterpret_cast<ResourceReference*>(childId);
    parent->AddGeometry(child, index);
}

//-----------------------------------------------------------------------------
void OrcGob_Geometry_Remove(ObjectGUID parentId, ObjectGUID childId)
{
    OrcGob* parent = reinterpret_cast<OrcGob*>(parentId);
    ResourceReference* child = reinterpret_cast<ResourceReference*>(childId);
    parent->RemoveGeometry(child);
}

//-----------------------------------------------------------------------------
void OrcGob_Animation_Add(ObjectGUID parentId, ObjectGUID childId, int index)
{
    OrcGob* parent = reinterpret_cast<OrcGob*>(parentId);
    ResourceReference* child = reinterpret_cast<ResourceReference*>(childId);
    parent->AddAnimation(child, index);
}

//-----------------------------------------------------------------------------
void OrcGob_Animation_Remove(ObjectGUID parentId, ObjectGUID childId)
{
    OrcGob* parent = reinterpret_cast<OrcGob*>(parentId);
    ResourceReference* child = reinterpret_cast<ResourceReference*>(childId);
    parent->RemoveAnimation(child);
}

//-----------------------------------------------------------------------------
void OrcGob_Target_Add(ObjectGUID parentId, ObjectGUID childId, int index)
{
    OrcGob* parent = reinterpret_cast<OrcGob*>(parentId);
    GameObjectReference* child = reinterpret_cast<GameObjectReference*>(childId);
    parent->AddTarget(child, index);
}

//-----------------------------------------------------------------------------
void OrcGob_Target_Remove(ObjectGUID parentId, ObjectGUID childId)
{
    OrcGob* parent = reinterpret_cast<OrcGob*>(parentId);
    GameObjectReference* child = reinterpret_cast<GameObjectReference*>(childId);
    parent->RemoveTarget(child);
}

//-----------------------------------------------------------------------------
void OrcGob_Friends_Add(ObjectGUID parentId, ObjectGUID childId, int index)
{
    OrcGob* parent = reinterpret_cast<OrcGob*>(parentId);
    GameObjectReference* child = reinterpret_cast<GameObjectReference*>(childId);
    parent->AddFriends(child, index);
}

//-----------------------------------------------------------------------------
void OrcGob_Friends_Remove(ObjectGUID parentId, ObjectGUID childId)
{
    OrcGob* parent = reinterpret_cast<OrcGob*>(parentId);
    GameObjectReference* child = reinterpret_cast<GameObjectReference*>(childId);
    parent->RemoveFriends(child);
}

//-----------------------------------------------------------------------------
void OrcGob_Children_Add(ObjectGUID parentId, ObjectGUID childId, int index)
{
    OrcGob* parent = reinterpret_cast<OrcGob*>(parentId);
    OrcGob* child = reinterpret_cast<OrcGob*>(childId);
    parent->AddChildren(child, index);
}

//-----------------------------------------------------------------------------
void OrcGob_Children_Remove(ObjectGUID parentId, ObjectGUID childId)
{
    OrcGob* parent = reinterpret_cast<OrcGob*>(parentId);
    OrcGob* child = reinterpret_cast<OrcGob*>(childId);
    parent->RemoveChildren(child);
}

//-----------------------------------------------------------------------------
//TerrainMap
//-----------------------------------------------------------------------------
Object* TerrainMap_Create(ObjectTypeGUID tid, void* data, int size)
{
    assert(0); // class TerrainMap is defined as abstract.
    return NULL;
}

//-----------------------------------------------------------------------------
void TerrainMap_Name_Set(ObjectGUID instanceId, void* data, int size)
{
    assert((data && size > 0) || (!data && size == 0));
    TerrainMap* instance = reinterpret_cast<TerrainMap*>(instanceId);
    wchar_t* localData = reinterpret_cast<wchar_t*>(data);
    instance->SetName(localData);
}

//-----------------------------------------------------------------------------
void TerrainMap_Visible_Set(ObjectGUID instanceId, void* data, int size)
{
    assert((data && size > 0) || (!data && size == 0));
    TerrainMap* instance = reinterpret_cast<TerrainMap*>(instanceId);
    bool localData = *reinterpret_cast<bool*>(data);
    instance->SetVisible(localData);
}

//-----------------------------------------------------------------------------
void TerrainMap_MinHeight_Set(ObjectGUID instanceId, void* data, int size)
{
    assert((data && size > 0) || (!data && size == 0));
    TerrainMap* instance = reinterpret_cast<TerrainMap*>(instanceId);
    float localData = *reinterpret_cast<float*>(data);
    instance->SetMinHeight(localData);
}

//-----------------------------------------------------------------------------
void TerrainMap_MaxHeight_Set(ObjectGUID instanceId, void* data, int size)
{
    assert((data && size > 0) || (!data && size == 0));
    TerrainMap* instance = reinterpret_cast<TerrainMap*>(instanceId);
    float localData = *reinterpret_cast<float*>(data);
    instance->SetMaxHeight(localData);
}

//-----------------------------------------------------------------------------
void TerrainMap_Diffuse_Set(ObjectGUID instanceId, void* data, int size)
{
    assert((data && size > 0) || (!data && size == 0));
    TerrainMap* instance = reinterpret_cast<TerrainMap*>(instanceId);
    wchar_t* localData = reinterpret_cast<wchar_t*>(data);
    instance->SetDiffuse(localData);
}

//-----------------------------------------------------------------------------
void TerrainMap_Normal_Set(ObjectGUID instanceId, void* data, int size)
{
    assert((data && size > 0) || (!data && size == 0));
    TerrainMap* instance = reinterpret_cast<TerrainMap*>(instanceId);
    wchar_t* localData = reinterpret_cast<wchar_t*>(data);
    instance->SetNormal(localData);
}

//-----------------------------------------------------------------------------
void TerrainMap_Specular_Set(ObjectGUID instanceId, void* data, int size)
{
    assert((data && size > 0) || (!data && size == 0));
    TerrainMap* instance = reinterpret_cast<TerrainMap*>(instanceId);
    wchar_t* localData = reinterpret_cast<wchar_t*>(data);
    instance->SetSpecular(localData);
}

//-----------------------------------------------------------------------------
void TerrainMap_Mask_Set(ObjectGUID instanceId, void* data, int size)
{
    assert((data && size > 0) || (!data && size == 0));
    TerrainMap* instance = reinterpret_cast<TerrainMap*>(instanceId);
    wchar_t* localData = reinterpret_cast<wchar_t*>(data);
    instance->SetMask(localData);
}

//-----------------------------------------------------------------------------
//DecorationMap
//-----------------------------------------------------------------------------
Object* DecorationMap_Create(ObjectTypeGUID tid, void* data, int size)
{
    return new DecorationMap();
}

//-----------------------------------------------------------------------------
void DecorationMap_Scale_Set(ObjectGUID instanceId, void* data, int size)
{
    assert((data && size > 0) || (!data && size == 0));
    DecorationMap* instance = reinterpret_cast<DecorationMap*>(instanceId);
    float localData = *reinterpret_cast<float*>(data);
    instance->SetScale(localData);
}

//-----------------------------------------------------------------------------
void DecorationMap_NumOfDecorators_Set(ObjectGUID instanceId, void* data, int size)
{
    assert((data && size > 0) || (!data && size == 0));
    DecorationMap* instance = reinterpret_cast<DecorationMap*>(instanceId);
    int32_t localData = *reinterpret_cast<int32_t*>(data);
    instance->SetNumOfDecorators(localData);
}

//-----------------------------------------------------------------------------
void DecorationMap_LodDistance_Set(ObjectGUID instanceId, void* data, int size)
{
    assert((data && size > 0) || (!data && size == 0));
    DecorationMap* instance = reinterpret_cast<DecorationMap*>(instanceId);
    float localData = *reinterpret_cast<float*>(data);
    instance->SetLodDistance(localData);
}

//-----------------------------------------------------------------------------
void DecorationMap_UseBillboard_Set(ObjectGUID instanceId, void* data, int size)
{
    assert((data && size > 0) || (!data && size == 0));
    DecorationMap* instance = reinterpret_cast<DecorationMap*>(instanceId);
    bool localData = *reinterpret_cast<bool*>(data);
    instance->SetUseBillboard(localData);
}

//-----------------------------------------------------------------------------
//LayerMap
//-----------------------------------------------------------------------------
Object* LayerMap_Create(ObjectTypeGUID tid, void* data, int size)
{
    return new LayerMap();
}

//-----------------------------------------------------------------------------
void LayerMap_LodTexture_Set(ObjectGUID instanceId, void* data, int size)
{
    assert((data && size > 0) || (!data && size == 0));
    LayerMap* instance = reinterpret_cast<LayerMap*>(instanceId);
    wchar_t* localData = reinterpret_cast<wchar_t*>(data);
    instance->SetLodTexture(localData);
}

//-----------------------------------------------------------------------------
void LayerMap_TextureScale_Set(ObjectGUID instanceId, void* data, int size)
{
    assert((data && size > 0) || (!data && size == 0));
    LayerMap* instance = reinterpret_cast<LayerMap*>(instanceId);
    float localData = *reinterpret_cast<float*>(data);
    instance->SetTextureScale(localData);
}

//-----------------------------------------------------------------------------
//TerrainGob
//-----------------------------------------------------------------------------
Object* TerrainGob_Create(ObjectTypeGUID tid, void* data, int size)
{
    return new TerrainGob();
}

//-----------------------------------------------------------------------------
void TerrainGob_CellSize_Set(ObjectGUID instanceId, void* data, int size)
{
    assert((data && size > 0) || (!data && size == 0));
    TerrainGob* instance = reinterpret_cast<TerrainGob*>(instanceId);
    float localData = *reinterpret_cast<float*>(data);
    instance->SetCellSize(localData);
}

//-----------------------------------------------------------------------------
void TerrainGob_HeightMap_Set(ObjectGUID instanceId, void* data, int size)
{
    assert((data && size > 0) || (!data && size == 0));
    TerrainGob* instance = reinterpret_cast<TerrainGob*>(instanceId);
    wchar_t* localData = reinterpret_cast<wchar_t*>(data);
    instance->SetHeightMap(localData);
}

//-----------------------------------------------------------------------------
void TerrainGob_LayerMap_Add(ObjectGUID parentId, ObjectGUID childId, int index)
{
    TerrainGob* parent = reinterpret_cast<TerrainGob*>(parentId);
    LayerMap* child = reinterpret_cast<LayerMap*>(childId);
    parent->AddLayerMap(child, index);
}

//-----------------------------------------------------------------------------
void TerrainGob_LayerMap_Remove(ObjectGUID parentId, ObjectGUID childId)
{
    TerrainGob* parent = reinterpret_cast<TerrainGob*>(parentId);
    LayerMap* child = reinterpret_cast<LayerMap*>(childId);
    parent->RemoveLayerMap(child);
}

//-----------------------------------------------------------------------------
void TerrainGob_DecorationMap_Add(ObjectGUID parentId, ObjectGUID childId, int index)
{
    TerrainGob* parent = reinterpret_cast<TerrainGob*>(parentId);
    DecorationMap* child = reinterpret_cast<DecorationMap*>(childId);
    parent->AddDecorationMap(child, index);
}

//-----------------------------------------------------------------------------
void TerrainGob_DecorationMap_Remove(ObjectGUID parentId, ObjectGUID childId)
{
    TerrainGob* parent = reinterpret_cast<TerrainGob*>(parentId);
    DecorationMap* child = reinterpret_cast<DecorationMap*>(childId);
    parent->RemoveDecorationMap(child);
}



//-----------------------------------------------------------------------------
// REGISTRATION
//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
void InitGobBridge(GobBridge& bridge)
{
  bridge.RegisterObject( "GameLevel", &GameLevel_Create );
  bridge.RegisterProperty( "GameLevel", "Name", &GameLevel_Name_Set, NULL );
  bridge.RegisterProperty( "GameLevel", "FogEnabled", &GameLevel_FogEnabled_Set, NULL );
  bridge.RegisterProperty( "GameLevel", "FogColor", &GameLevel_FogColor_Set, NULL );
  bridge.RegisterProperty( "GameLevel", "FogRange", &GameLevel_FogRange_Set, NULL );
  bridge.RegisterProperty( "GameLevel", "FogDensity", &GameLevel_FogDensity_Set, NULL );

  bridge.RegisterObject( "GameObject", &GameObject_Create );
  bridge.RegisterProperty( "GameObject", "Transform", &GameObject_Transform_Set, NULL );
  bridge.RegisterProperty( "GameObject", "Name", &GameObject_Name_Set, NULL );
  bridge.RegisterProperty( "GameObject", "Visible", &GameObject_Visible_Set, &GameObject_Visible_Get );
  bridge.RegisterProperty( "GameObject", "Bounds", NULL, &GameObject_Bounds_Get );
  bridge.RegisterProperty( "GameObject", "LocalBounds", NULL, &GameObject_LocalBounds_Get );
  bridge.RegisterChildList( "GameObject", "Component", &GameObject_Component_Add, &GameObject_Component_Remove);

  bridge.RegisterObject( "GameObjectComponent", &GameObjectComponent_Create );
  bridge.RegisterProperty( "GameObjectComponent", "Name", &GameObjectComponent_Name_Set, NULL );
  bridge.RegisterProperty( "GameObjectComponent", "Active", &GameObjectComponent_Active_Set, NULL );

  bridge.RegisterObject( "GameObjectReference", &GameObjectReference_Create );
  bridge.RegisterProperty( "GameObjectReference", "Target", &GameObjectReference_Target_Set, NULL );

  bridge.RegisterObject( "ResourceReference", &ResourceReference_Create );
  bridge.RegisterProperty( "ResourceReference", "Target", &ResourceReference_Target_Set, NULL );

  bridge.RegisterObject( "TransformComponent", &TransformComponent_Create );
  bridge.RegisterProperty( "TransformComponent", "Translation", &TransformComponent_Translation_Set, NULL );
  bridge.RegisterProperty( "TransformComponent", "Rotation", &TransformComponent_Rotation_Set, NULL );
  bridge.RegisterProperty( "TransformComponent", "Scale", &TransformComponent_Scale_Set, NULL );

  bridge.RegisterObject( "GameObjectGroup", &GameObjectGroup_Create );
  bridge.RegisterChildList( "GameObjectGroup", "Child", &GameObjectGroup_Child_Add, &GameObjectGroup_Child_Remove);

  bridge.RegisterObject( "RenderComponent", &RenderComponent_Create );
  bridge.RegisterProperty( "RenderComponent", "Visible", &RenderComponent_Visible_Set, NULL );
  bridge.RegisterProperty( "RenderComponent", "CastShadow", &RenderComponent_CastShadow_Set, NULL );
  bridge.RegisterProperty( "RenderComponent", "ReceiveShadow", &RenderComponent_ReceiveShadow_Set, NULL );
  bridge.RegisterProperty( "RenderComponent", "DrawDistance", &RenderComponent_DrawDistance_Set, NULL );

  bridge.RegisterObject( "MeshComponent", &MeshComponent_Create );
  bridge.RegisterProperty( "MeshComponent", "Ref", &MeshComponent_Ref_Set, NULL );

  bridge.RegisterObject( "SpinnerComponent", &SpinnerComponent_Create );
  bridge.RegisterProperty( "SpinnerComponent", "RPS", &SpinnerComponent_RPS_Set, NULL );

  bridge.RegisterObject( "Locator", &Locator_Create );
  bridge.RegisterChildList( "Locator", "Resource", &Locator_Resource_Add, &Locator_Resource_Remove);

  bridge.RegisterObject( "DirLightGob", &DirLightGob_Create );
  bridge.RegisterProperty( "DirLightGob", "Ambient", &DirLightGob_Ambient_Set, NULL );
  bridge.RegisterProperty( "DirLightGob", "Diffuse", &DirLightGob_Diffuse_Set, NULL );
  bridge.RegisterProperty( "DirLightGob", "Specular", &DirLightGob_Specular_Set, NULL );
  bridge.RegisterProperty( "DirLightGob", "Direction", &DirLightGob_Direction_Set, NULL );

  bridge.RegisterObject( "BoxLightGob", &BoxLightGob_Create );
  bridge.RegisterProperty( "BoxLightGob", "Ambient", &BoxLightGob_Ambient_Set, NULL );
  bridge.RegisterProperty( "BoxLightGob", "Diffuse", &BoxLightGob_Diffuse_Set, NULL );
  bridge.RegisterProperty( "BoxLightGob", "Specular", &BoxLightGob_Specular_Set, NULL );
  bridge.RegisterProperty( "BoxLightGob", "Direction", &BoxLightGob_Direction_Set, &BoxLightGob_Direction_Get );
  bridge.RegisterProperty( "BoxLightGob", "Attenuation", &BoxLightGob_Attenuation_Set, NULL );

  bridge.RegisterObject( "PointLightGob", &PointLightGob_Create );
  bridge.RegisterProperty( "PointLightGob", "Ambient", &PointLightGob_Ambient_Set, NULL );
  bridge.RegisterProperty( "PointLightGob", "Diffuse", &PointLightGob_Diffuse_Set, NULL );
  bridge.RegisterProperty( "PointLightGob", "Specular", &PointLightGob_Specular_Set, NULL );
  bridge.RegisterProperty( "PointLightGob", "Attenuation", &PointLightGob_Attenuation_Set, NULL );
  bridge.RegisterProperty( "PointLightGob", "Range", &PointLightGob_Range_Set, NULL );

  bridge.RegisterObject( "ControlPointGob", &ControlPointGob_Create );

  bridge.RegisterObject( "CurveGob", &CurveGob_Create );
  bridge.RegisterProperty( "CurveGob", "Color", &CurveGob_Color_Set, NULL );
  bridge.RegisterProperty( "CurveGob", "Closed", &CurveGob_Closed_Set, NULL );
  bridge.RegisterProperty( "CurveGob", "Steps", &CurveGob_Steps_Set, NULL );
  bridge.RegisterProperty( "CurveGob", "InterpolationType", &CurveGob_InterpolationType_Set, NULL );
  bridge.RegisterChildList( "CurveGob", "Point", &CurveGob_Point_Add, &CurveGob_Point_Remove);

  bridge.RegisterObject( "SkyDome", &SkyDome_Create );
  bridge.RegisterProperty( "SkyDome", "CubeMap", &SkyDome_CubeMap_Set, NULL );

  bridge.RegisterObject( "PrimitiveShapeGob", &PrimitiveShapeGob_Create );
  bridge.RegisterProperty( "PrimitiveShapeGob", "Color", &PrimitiveShapeGob_Color_Set, NULL );
  bridge.RegisterProperty( "PrimitiveShapeGob", "Emissive", &PrimitiveShapeGob_Emissive_Set, NULL );
  bridge.RegisterProperty( "PrimitiveShapeGob", "Specular", &PrimitiveShapeGob_Specular_Set, NULL );
  bridge.RegisterProperty( "PrimitiveShapeGob", "SpecularPower", &PrimitiveShapeGob_SpecularPower_Set, NULL );
  bridge.RegisterProperty( "PrimitiveShapeGob", "Diffuse", &PrimitiveShapeGob_Diffuse_Set, NULL );
  bridge.RegisterProperty( "PrimitiveShapeGob", "Normal", &PrimitiveShapeGob_Normal_Set, NULL );
  bridge.RegisterProperty( "PrimitiveShapeGob", "TextureTransform", &PrimitiveShapeGob_TextureTransform_Set, NULL );

  bridge.RegisterObject( "CubeGob", &CubeGob_Create );

  bridge.RegisterObject( "TorusGob", &TorusGob_Create );

  bridge.RegisterObject( "SphereGob", &SphereGob_Create );

  bridge.RegisterObject( "ConeGob", &ConeGob_Create );

  bridge.RegisterObject( "CylinderGob", &CylinderGob_Create );

  bridge.RegisterObject( "PlaneGob", &PlaneGob_Create );

  bridge.RegisterObject( "BillboardGob", &BillboardGob_Create );
  bridge.RegisterProperty( "BillboardGob", "Intensity", &BillboardGob_Intensity_Set, NULL );
  bridge.RegisterProperty( "BillboardGob", "Diffuse", &BillboardGob_Diffuse_Set, NULL );
  bridge.RegisterProperty( "BillboardGob", "TextureTransform", &BillboardGob_TextureTransform_Set, NULL );

  bridge.RegisterObject( "OrcGob", &OrcGob_Create );
  bridge.RegisterProperty( "OrcGob", "Weight", &OrcGob_Weight_Set, NULL );
  bridge.RegisterProperty( "OrcGob", "Emotion", &OrcGob_Emotion_Set, NULL );
  bridge.RegisterProperty( "OrcGob", "Goals", &OrcGob_Goals_Set, NULL );
  bridge.RegisterProperty( "OrcGob", "Color", &OrcGob_Color_Set, NULL );
  bridge.RegisterProperty( "OrcGob", "ToeColor", &OrcGob_ToeColor_Set, NULL );
  bridge.RegisterChildList( "OrcGob", "Geometry", &OrcGob_Geometry_Add, &OrcGob_Geometry_Remove);
  bridge.RegisterChildList( "OrcGob", "Animation", &OrcGob_Animation_Add, &OrcGob_Animation_Remove);
  bridge.RegisterChildList( "OrcGob", "Target", &OrcGob_Target_Add, &OrcGob_Target_Remove);
  bridge.RegisterChildList( "OrcGob", "Friends", &OrcGob_Friends_Add, &OrcGob_Friends_Remove);
  bridge.RegisterChildList( "OrcGob", "Children", &OrcGob_Children_Add, &OrcGob_Children_Remove);

  bridge.RegisterObject( "TerrainMap", &TerrainMap_Create );
  bridge.RegisterProperty( "TerrainMap", "Name", &TerrainMap_Name_Set, NULL );
  bridge.RegisterProperty( "TerrainMap", "Visible", &TerrainMap_Visible_Set, NULL );
  bridge.RegisterProperty( "TerrainMap", "MinHeight", &TerrainMap_MinHeight_Set, NULL );
  bridge.RegisterProperty( "TerrainMap", "MaxHeight", &TerrainMap_MaxHeight_Set, NULL );
  bridge.RegisterProperty( "TerrainMap", "Diffuse", &TerrainMap_Diffuse_Set, NULL );
  bridge.RegisterProperty( "TerrainMap", "Normal", &TerrainMap_Normal_Set, NULL );
  bridge.RegisterProperty( "TerrainMap", "Specular", &TerrainMap_Specular_Set, NULL );
  bridge.RegisterProperty( "TerrainMap", "Mask", &TerrainMap_Mask_Set, NULL );

  bridge.RegisterObject( "DecorationMap", &DecorationMap_Create );
  bridge.RegisterProperty( "DecorationMap", "Scale", &DecorationMap_Scale_Set, NULL );
  bridge.RegisterProperty( "DecorationMap", "NumOfDecorators", &DecorationMap_NumOfDecorators_Set, NULL );
  bridge.RegisterProperty( "DecorationMap", "LodDistance", &DecorationMap_LodDistance_Set, NULL );
  bridge.RegisterProperty( "DecorationMap", "UseBillboard", &DecorationMap_UseBillboard_Set, NULL );

  bridge.RegisterObject( "LayerMap", &LayerMap_Create );
  bridge.RegisterProperty( "LayerMap", "LodTexture", &LayerMap_LodTexture_Set, NULL );
  bridge.RegisterProperty( "LayerMap", "TextureScale", &LayerMap_TextureScale_Set, NULL );

  bridge.RegisterObject( "TerrainGob", &TerrainGob_Create );
  bridge.RegisterProperty( "TerrainGob", "CellSize", &TerrainGob_CellSize_Set, NULL );
  bridge.RegisterProperty( "TerrainGob", "HeightMap", &TerrainGob_HeightMap_Set, NULL );
  bridge.RegisterChildList( "TerrainGob", "LayerMap", &TerrainGob_LayerMap_Add, &TerrainGob_LayerMap_Remove);
  bridge.RegisterChildList( "TerrainGob", "DecorationMap", &TerrainGob_DecorationMap_Add, &TerrainGob_DecorationMap_Remove);

}
}; // end namespace LvEdEngine
#pragma warning(pop)
